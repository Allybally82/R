#Setup libraries
library(magrittr)
library(dplyr)
library(tidytlg)
library(stringr)
library(tidyr)
library(huxtable)

#Specify the metadata xls file, and tbltype
column_metadata_file <- paste0(read_path(dpspath,"column_metadata.xlsx"))
title_file <- paste0(read_path(dpspath, "titles.xlsx"))
opath = opath[environ]

#General table settings as population, treatment variables
popfl <- "SAFFL"
poplbl <- "Treated"
trtvar <- c("TRT01AN","TRT01A")
tblid <- "TEFFLR03cTreated"
tbltype <- "COHCORE1"
subset <- "Subjects who are off-treatment"

## Read in the ADSL dataset 
adsl <- haven::read_sas(read_path(a_in, "adsl.sas7bdat")) %>%
  filter(across(!!popfl) == "Y" & COHORT !='' & !is.na(trtvar)) %>% 
  select (USUBJID, all_of(c(trtvar,popfl))) %>% 
  tidytlg::tlgsetup(var = trtvar[[1]],                                                         
                    column_metadata_file = column_metadata_file,
                    tbltype = tbltype  ) 



## Read in the subset ADEF dataset to get the necessary data
##Off treatment and below LOQ at EOT
adef <-haven::read_sas(read_path(a_in, "adef.sas7bdat")) %>%
  filter(SAFFL=="Y" & OFFTRTFL =="Y") %>% 
  select (USUBJID, starts_with(c("AVAL")), all_of(trtvar), OFFTRTFL, SAFFL, COHORT, PARAMCD, PARAM, CRIT3FL) %>%
  tidytlg::tlgsetup(var = trtvar[[1]],                                                         
                    column_metadata_file = column_metadata_file,
                    tbltype = tbltype) 

#section of table if no obs exist for section
d1<-c("","","","","","","","HEADER")
d2<-c("n (%)","0","0","0","0","0","0","HEADER")
d3<-c("90% CI{\\super a}",NA,NA,NA,NA,NA,NA,"HEADER")
dummy1=as.data.frame(rbind(d1,d2,d3))
colnames(dummy1)<- c("label","col1","col2","col3","col4","col5","col6","row_type")


#check if the analysis dataset has 0 observation to avoid errors
dummy <-  filter(adef, SAFFL=="Y" & OFFTRTFL =="Y" & (AVALC == "Yes" & PARAMCD == "BIOCHEM") | (PARAMCD == "ALT" & CRIT3FL == "Y") | (PARAMCD == "ALT" & CRIT3FL == "Y"))


df <- function() {
  if(nrow(dummy) == 0){
    data.frame(label='No data to report', COL1='', COL2='', COL3='', COL4='', COL5='', COL6='', row_type='HEADER')
  }
  
  else {
    
    ## Analysis Set
    t1 <- adsl %>%
      freq(colvar = "colnbr",
           rowvar = popfl,
           statlist = statlist("n"),
           subset = SAFFL == "Y",
           rowtext = paste("Analysis set:",poplbl))
    
    ## Subset
    t2 <- adef %>%
      freq(colvar = "colnbr",
           rowvar = popfl,
           statlist = statlist("n"),
           subset = SAFFL == "Y",
           rowtext = paste("Subset:", subset))
    
    
    t4<- adef %>% filter(PARAMCD == "ALT" & CRIT3FL == "Y")
    
    if(nrow(t4) == 0){
      dummy1[1,1]<-"ALT Flare"
      t4a<-dummy1
    } else {
      
      t4a <- adef %>%
        freq (denom_df = adef,
              colvar = "colnbr",
              rowbyvar = , 
              rowvar = popfl,
              subset = PARAMCD == "ALT" & CRIT3FL == "Y",
              row_header = "ALT Flare",
              rowtext = "n (%)",
              statlist =statlist("n (x.x%)"),
              .keep = TRUE,
              .ord = TRUE)
    } 
    
    
    t5<- adef %>% filter(PARAMCD == "AST" & CRIT3FL == "Y")
    
    if(nrow(t5) == 0){
      dummy1[1,1]<-"AST Flare"
      t5a<- dummy1
    } else {
      
      t5a <- adef %>%
        freq (denom_df = adef,
              colvar = "colnbr",
              rowbyvar = , 
              rowvar = popfl,
              subset = PARAMCD == "ALT" & CRIT3FL == "Y",
              row_header = "ALT Flare",
              rowtext = "n (%)",
              statlist =statlist("n (x.x%)"),
              .keep = TRUE,
              .ord = TRUE)
    }
    
    t6<- adef %>% filter(AVALC == "Yes" & PARAMCD == "BIOCHEM")
    
    if(nrow(t6) == 0){
      dummy1[1,1]="Biochemical Flare"
      t6a<- dummy1
    } else {
      
      #each param
      t6a <- adef %>%
        freq (denom_df = adef,
              colvar = "colnbr",
              rowbyvar = , 
              rowvar = popfl,
              subset = AVALC == "Yes" & PARAMCD == "BIOCHEM",
              row_header = "Biochemical Flare",
              rowtext = "n (%)",
              statlist =statlist("n (x.x%)"),
              .keep = TRUE,
              .ord = TRUE)
    }
    
    
    ## ** binomial CI ** : using stats::binom.test to calculate binomial CI (Clopper-Pearson exact).
    # First find successes and total for each subgroup
    freq_succ <- adef %>%
      freq (denom_df = adef,
            colvar = "colnbr",
            rowbyvar = "PARAMCD", 
            rowvar = popfl,
            subset = (AVALC == "Yes" & PARAMCD == "BIOCHEM") | (PARAMCD == "ALT" & CRIT3FL == "Y") | (PARAMCD == "ALT" & CRIT3FL == "Y"),
            statlist = statlist(c("N", "n")),
            .keep = TRUE,
            .ord = TRUE)
    
    
    # Separate counts
    t_count <- freq_succ %>% 
      filter(row_type != "BY_HEADER1") %>% 
      pivot_longer(cols = starts_with("col"),
                   names_to = "names",
                   values_to = "count") 
    
    # Separate totals
    t_total <- t_count %>% 
      filter(label == "N") %>% 
      rename(total = count) %>% 
      select(-label, -row_type, -PARAMCD_ord, -SAFFL_ord) %>% 
      as.data.frame()
    
    # Combine
    t_total_counts <- t_count %>% 
      filter(label != "N") %>% 
      as.data.frame() %>% 
      full_join(t_total)
    
    
    # BinomialCI function to calculate CI and present it as desired
    binomialCI<-function(count,total,label,paramcd,ci=0.95)
    {
      
      if ( (!str_detect('-',count) && !str_detect('-',total)) && (!str_detect('-',count) && !str_detect('0',total))  ) {
        
        CI=round(binom.test(x=as.numeric(count),n=as.numeric(total),conf.level=ci)$conf.int*100,2)
        temp=data.frame(label, as.character(paramcd), 
                        paste('(',paste(paste(CI[1],'%',sep=''),paste(CI[2],'%',sep=''),sep=', '),')'))
        
        
        names(temp)<-c('label','paramcd','col1')
        temp<-temp %>% select(c('label','col1','paramcd'))
        
      }
    }
    
    
    
    ##over each param
    trt<- mapply(binomialCI, count=t_total_counts$count, total=t_total_counts$total, label=t_total_counts$names, paramcd=t_total_counts$PARAMCD, ci=0.9)
    trt1<-matrix(unlist(trt),ncol=3, byrow=T)
    trt2<-as.data.frame(trt1)
    
    ##format
    t_conf <- trt2 %>% pivot_wider(id_cols=V3, names_from = V1,
                                   values_from =  V2)
    
    ##output each second row of table for each param if there are obs
    if(nrow(t4) != 0){
      t4b<-t_conf %>% filter(V3=="ALT")
    } else {
      t4b<-data.frame()
    }
    
    if(nrow(t5) != 0){
      t5b<-t_conf %>% filter(V3=="AST")
    } else {
      t5b<-data.frame()
    }
    
    if(nrow(t6) != 0){
      t6b<-t_conf %>% filter(V3=="BIOCHEM")
    } else {
      t6b<-data.frame()
    }
    
    
    ##bring all together and format
    final1<-bind_rows(t1,t2,t4a,t4b,t5a,t5b,t6a,t6b)
    final1$label[is.na(final1$label)] <- "90% CI{\\super a}"
    final1$row_type[is.na(final1$row_type)] <- "HEADER"
    final1<-select(final1, -"SAFFL_ord", -"V3", -"group_level")
    final2<-final1
    
  }  
}

final2<-df()


if(nrow(dummy) != 0){
  
final2$col1 <- gsub('-', '0', final2$col1)
final2$col2 <- gsub('-', '0', final2$col2)
final2$col3 <- gsub('-', '0', final2$col3)
final2$col4 <- gsub('-', '0', final2$col4)
final2$col5 <- gsub('-', '0', final2$col5)
final2$col6 <- gsub('-', '0', final2$col6)

for (i in 1:6) {
  variable = paste0("col", i)
  final2[variable][is.na(final2[variable])] <- "-"
  }

}

##indentations and new lines
tbl <- bind_table(final2,                                                        
                  column_metadata_file = column_metadata_file,
                  tbltype = tbltype) %>% 
  mutate(
    indentme = case_when(
      str_detect(label, "Subset") ~ 0,
      str_detect(label, "flare") ~ 1,
      str_detect(label, "%") ~ 2,
      str_detect(label, "90") ~ 2,
      TRUE ~ 0),
    
    newrows = case_when(
      str_detect(label,"ALT") ~ 1,
      #str_detect(label,"20,000") ~ 1,
      #str_detect(label,">") ~ 1,
      TRUE ~ 0)
  ) 


# Output Results ----------------------------------------------------------------------------------------
gentlg(huxme       = tbl,
       opath       = opath, 
       file        = tblid,
       orientation = "landscape",
       wcol = 0.25,
       title_file  = title_file)


#end of code
